<#include "/macro.include"/>
<#assign className = table.className>   
<#assign classNameFirstLower = table.classNameFirstLower>   
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<#macro mapperEl value>${r"#{"}${value}}</#macro>
<#macro namespace>${className}.</#macro>

<mapper namespace="${basepackage}.dao.${classNameFirstLower}.${className}Dao">
	<!-- 用于select查询公用抽取的列 -->
	<sql id="Base_Column_List">
	    <![CDATA[
		<#list table.columns as column>
			${column.sqlName} <#if column_has_next>,</#if>
		</#list>
	    ]]>
	</sql>

	  <select id="selectByPrimaryKey" parameterType="${table.idColumn.javaType}" resultType="pm">
	    select 
	    <include refid="Base_Column_List" />
	    from ${table.sqlName} 
	    where ${table.idColumn.sqlName} = <@gemMyBatisCol parameterName=table.idColumn.columnNameFirstLower  />
	  </select>
	  
       <update id="deleteByPrimaryKey" parameterType="${table.idColumn.javaType}">
	    update ${table.sqlName} set is_deleted = 'Y'
	    where ${table.idColumn.sqlName} = <@gemMyBatisCol parameterName=table.idColumn.columnNameFirstLower  />
	  </update>
	  
	  <insert id="insert" parameterType="pm">
	    insert into ${table.sqlName} (<include refid="Base_Column_List" />)
	    values (
		    <#list table.columns as column>
	        	<@gemMyBatisCol parameterName=column.columnNameFirstLower  /> <#if column_has_next>,</#if>
	        </#list> 
	    )
  	  </insert>  
  
  <insert id="insertSelective" parameterType="pm">
    insert into ${table.sqlName}
    <trim prefix="(" suffix=")" suffixOverrides=",">
      	    <#list table.columns as column>
	              <if test="${column.columnNameFirstLower} != null">
			        ${column.sqlName} ,
			      </if>
	        </#list> 
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
          <#list table.columns as column>
	      <if test="${column.columnNameFirstLower} != null">
	        <@gemMyBatisCol parameterName=column.columnNameFirstLower  /> ,
	      </if>
          </#list> 
    </trim>
  </insert>
    
  
  <update id="updateByPrimaryKeySelective" parameterType="pm">
    update ${table.sqlName}
    <set>
       <#list table.columns as column>
	      <if test="${column.columnNameFirstLower} != null">
	         ${column.sqlName} = <@gemMyBatisCol parameterName=column.columnNameFirstLower  /> ,
	      </if>
       </#list> 
    </set>
    where ${table.idColumn.sqlName} = <@gemMyBatisCol parameterName=table.idColumn.columnNameFirstLower  />
   
  </update>
  
  <update id="updateByPrimaryKey" parameterType="pm">
    update ${table.sqlName}
    set  
        <#list table.columns as column>
	        ${column.sqlName} = <@gemMyBatisCol parameterName=column.columnNameFirstLower  />  <#if column_has_next>,</#if>
       </#list> 
    where ${table.idColumn.sqlName} = <@gemMyBatisCol parameterName=table.idColumn.columnNameFirstLower  />
  </update> 
	
  <update id="deleteByIds" parameterType="java.lang.String">
	update ${table.sqlName} set is_deleted = 'Y'
    where ${table.idColumn.sqlName} in
   	<foreach item="ids" collection="array" open="(" separator="," close=")">
		<@mapperEl "ids"/>
	</foreach>
  </update>
   
   <!--  query begin -->
	  <select id="getByCondition" resultType="pm" parameterType="pm" >
	    select <include refid="Base_Column_List" />
	   		from ${table.sqlName}
	   	  <where>  
	        <#list table.columns as column>
	        <if test="${column.columnNameFirstLower} != null">
		        and ${column.sqlName} = <@gemMyBatisCol parameterName=column.columnNameFirstLower  />
	        </if>
	       </#list>
	    </where> 
	  </select>
	  <select id="getByConditionList" resultType="pm" parameterType="pm" >
	    select <include refid="Base_Column_List" />
	   		from ${table.sqlName}
	   	  <where>  
	        <#list table.columns as column>
	        <if test="${column.columnNameFirstLower} != null">
		        and ${column.sqlName} = <@gemMyBatisCol parameterName=column.columnNameFirstLower  />
	        </if>
	       </#list>
	    </where> 
	  </select>
	  
	  <select id="getByConditionCount" parameterType="pm" resultType="long" >
	    select COUNT(1)
	   		from ${table.sqlName}
	   	  <where>  
	        <#list table.columns as column>
	        <if test="${column.columnNameFirstLower} != null">
		        and ${column.sqlName} = <@gemMyBatisCol parameterName=column.columnNameFirstLower  />
	        </if>
	       </#list>
	    </where> 
	  </select>
	
</mapper>

<#macro gemJdbcType javaType>
	<@compress single_line=true>
	<#if (javaType=="Float"||javaType=="Double"||javaType=="java.lang.Float"||javaType=="java.lang.Double"||javaType=="java.math.BigDecimal")>jdbcType="DECIMAL"</#if>
	<#if (javaType=="Date"||javaType=="java.util.Date")>jdbcType="TIMESTAMP"</#if>
	<#if (javaType=="String"||javaType=="java.lang.String")>jdbcType="VARCHAR"</#if>
	<#if (javaType=="Long"||javaType=="java.lang.Long")>jdbcType="BIGINT"</#if>
	<#if (javaType=="Integer"||javaType=="java.lang.Integer")>jdbcType="INTEGER"</#if>
	<#if (javaType=="byte"||javaType=="java.lang.Byte")>jdbcType="TINYINT"</#if>
    </@compress> 
</#macro>
<#macro gemJdbcType_1 javaType>
	<@compress single_line=true>
	<#if (javaType=="Long"||javaType=="Integer"||javaType=="Float"||javaType=="Double"||javaType=="java.lang.Long"||javaType=="java.lang.Integer"||javaType=="java.lang.Float"||javaType=="java.lang.Double")>
	jdbcType=DECIMAL
	</#if>
	<#if (javaType=="Date"||javaType=="java.util.Date")>jdbcType=TIMESTAMP</#if>
	<#if (javaType=="String"||javaType=="java.lang.String")>jdbcType=VARCHAR</#if>
    </@compress> 
</#macro>

<#macro gemMyBatisCol parameterName >
	<@compress single_line=true>
		${r"#{"} ${parameterName} }
	</@compress> 
</#macro>